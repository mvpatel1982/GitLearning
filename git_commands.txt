Git commands:

Reference Link: https://confluence.atlassian.com/bitbucketserver/basic-git-commands-776639767.html

 git init (Intialize .git folder)

Adding files to git

 git add <file name> OR
 git add . (It will add all files) OR
 git add * (It will add all files)

Remove files to git

 git rm <file name> OR
 git rm . (It will remove all files) OR
 git rm * (It will remove all files)

Check the status of your files

git status 

Note: If you hit this command after git add command, all updated files will show in green color) 

Note: If you hit this command before git add command, all updated files will show in red color)

Commit flies locally

 git commit -m "Commit Message"

Check git Log command

 git log

When to use git checkout file name command?

Suppose you have one file called env.test and that file has commited over on remote branch and that file contains 10 lines code.
Now if you by mistakenly update this file and you want back the remote changes again, that time you have to use below command.

 git checkout <file name> 
 e.g. git checkout env.test 

Note: This command will help before git add command. (File content will change)

When to use git reset HEAD file name command?

Suppose you have one file called env.test and you have added file, but not push to the remote branch.
If you want to unstage your file from stage, that time you have to use below command.

 git reset HEAD <file name>
 e.g. git reset HEAD env.test

Note: This command will help after git add command. (File content will remain as it is)

When to use git reset --soft HEAD command?

Suppose you commit your changes and if you want to roll back your changes.
Remove your latest commit, that time you have to use below command.

First check git log

 git log

Suppose above command display 05 commits and you want to roll back last 02 commits that time you have to enter below command.

 git reset --soft HEAD~2
 git log

Last 02 commit will remove automatically.

Create new local branch

 git branch <branch name>
 git branch local

 Show list the local branches in git

  git branch

 Show list the remote and local branches in git

  git branch -a

 Delete local branch in git

  git branch -d <branch name>
  git branch -d local

Create new local branch and checkin/Move to that branch
Suppose you are in master branch and as soon as you hit the below command it moves to the newly created branch with having the code base from master.

 git checkout -b <branch name>
 git checkout -b local

Push local branch to git server

 git push -u origin <branch name>
 git push -u origin local
 git branch -a

Use of git stash command
Suppose you have modified the file and you don't want to add/remove the changes in git log. and same time you want to move to another branch. That time we should use git stash command.

You are in local branch and you modified file abc.java and now you want to move to master branch.

 git stash
 git checkout <existing branch name> (Hit this command if you want to move to existing local branch)
 git checkout -b <new branch name>  (Hit this command if you want to move to new local branch)

Suppose you successfully move to the existing local master branch.
Note: We have applied git stash command, we can take our changes to this branch.
Local branch is having one commit ahead and master is one commit back.

So, first we need to take the latest changes from the local branch and then we applied git stash command. So master branch and local branch both are on equivilent.

 git rebase <local branch> (We take the latest code from local branch and right now we are in master branch)
 git rebase local
 git log

Note: After checking git log you see the latest changes has been applied to the local branch but not to the remote branch. If we applied the same to the remote branch we have to hit below command.

 git push origin master

Now we need to apply the stash command.

 git stash apply

Modified the file and add/remove changes and commit the the master local branch.
 
Delete the remote branch in git

 git branch -a
 git push origin --delete <remote branch name>
 git push origin --delete <next>
 git branch -a


